<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Byte$ 4273 - Wallet Offline MVP</title>

  <!-- Tailwind (CDN) e FontAwesome para estilo -->
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

  <style>
    @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&display=swap');

    :root {
      --bg: #0a0a0a;
      --fg: #e5e5e5;
      --cyan: #00f0ff;
      --blue: #0085ff;
      --gradient-s: 90deg;
    }

    * { box-sizing: border-box; }

    html { overflow-y: auto; scroll-behavior: smooth; }
    body {
      font-family: 'Space Grotesk', sans-serif;
      margin: 0;
      background: var(--bg);
      color: var(--fg);
      overflow-x: hidden;
    }

    .gradient-text {
      background: linear-gradient(90deg, #00f0ff, #0085ff, #8a2be2);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      transition: all 0.3s ease;
    }

    .glow-card {
      box-shadow: 0 0 15px rgba(0, 255, 255, 0.3);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .glow-card:hover {
      box-shadow: 0 0 25px rgba(0, 255, 255, 0.5);
      transform: translateY(-5px);
    }

    .hexagon {
      clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
    }

    /* Background e animações de crypto (visuais) */
    .crypto-bg { position: absolute; opacity: 0.1; z-index: 0; }
    .blockchain-line { height: 2px; background: linear-gradient(90deg, transparent, #00f0ff, transparent); animation: blockchainFlow 12s linear infinite; }
    @keyframes blockchainFlow { 0% { transform: translateX(-100%); } 100% { transform: translateX(100%); } }

    /* Layout principal de painel */
    .content-wrapper { position: relative; z-index: 10; }

    /* Responsividade simples */
    @media (min-width: 900px) {
      .layout { display: grid; grid-template-columns: 360px 1fr; gap: 1.25rem; align-items: start; }
    }

    /* Estilos de formulário e botões */
    .input, .select {
      width: 100%; padding: 0.75rem 1rem; border-radius: 0.5rem;
      background: rgba(2, 6, 23, 0.6); border: 1px solid rgba(0,255,255,0.25);
      color: #e8f6ff;
    }
    .input::placeholder { color: #9bd7ea; opacity: 0.8; }

    .btn {
      padding: 0.75rem 1rem; border-radius: 0.5rem;
      border: none; cursor: pointer; font-weight: 600;
    }
    .btn-primary {
      background: linear-gradient(90deg, #00f0ff, #0085ff);
      color: #000; box-shadow: 0 4px 14px rgba(0, 180, 255, 0.5);
    }
    .btn-secondary {
      background: rgba(255,255,255,0.08); color: #eaffff;
    }

    /* Ocultar/Mostrar seções */
    .hidden { display: none; }
  </style>
</head>
<body class="min-h-screen">

  <!-- Backgrounds decorativos (opcional) -->
  <div class="crypto-bg">
    <i class="fab fa-bitcoin" style="position: absolute; top: 8%; left: 4%; font-size: 6rem; opacity:.15;"></i>
    <div class="blockchain-line" style="position: absolute; top: 22%; left: -10%; width: 120%;"></div>
  </div>

  <!-- Conteúdo principal -->
  <div id="app" class="relative min-h-screen">
    <!-- Section: Login -->
    <section id="login-section" class="min-h-screen flex items-center justify-center p-6">
      <div class="glow-card rounded-2xl p-6 md:p-10 w-full max-w-2xl bg-black/60 border border-cyan-500 border-opacity-20 backdrop-filter backdrop-blur-lg">
        <div class="flex items-center mb-4">
          <div class="hexagon w-12 h-12 bg-gradient-to-br from-cyan-400 to-blue-600 flex items-center justify-center">
            <span class="text-black font-bold" style="font-size: 1rem;">B$</span>
          </div>
          <div class="ml-3">
            <div class="text-2xl font-bold gradient-text" style="letter-spacing: .5px;">Wallet Byte$</div>
            <div class="text-sm text-cyan-300" style="margin-top: 2px;">A Nova Dimensão da Economia Digital Consciente</div>
          </div>
        </div>

        <div class="mt-4 mb-6 text-sm text-cyan-300" style="opacity: .95;">
          Entre com seu Convite Byte$ para acessar sua Wallet Byte$. Projetada para ser rápida, segura e pronta para operação Online & offline com assinaturas criptografadas.
        </div>

        <form id="loginForm" class="space-y-4" onsubmit="event.preventDefault(); handleLogin();">
          <div>
            <label class="block text-sm mb-1">Usuário </label>
            <input id="username" class="input" type="text" placeholder="#Byte$4273" autocomplete="username" required />
          </div>
          <div>
            <label class="block text-sm mb-1">Senha</label>
            <input id="password" class="input" type="password" placeholder="Senha" autocomplete="current-password" required />
          </div>

          <div class="flex items-center justify-between">
            <div class="flex items-center">
              <input id="remember" type="checkbox" class="mr-2" />
              <label for="remember" class="text-sm">Manter sessão (opcional)</label>
            </div>
            <a href="#" class="text-xs text-cyan-300 hover:text-white">Esqueci minha senha</a>
          </div>

          <div class="flex items-center justify-between pt-2">
            <button type="submit" class="btn btn-primary" style="min-width: 140px;">Entrar</button>
            <span class="text-xs text-cyan-300">ou</span>
            <button type="button" class="btn btn-secondary" onclick="quickFillDemo()">Usar usuário demo</button>
          </div>
        </form>

        <div id="login-error" class="mt-2 text-sm text-red-400 hidden" role="alert" aria-live="polite"></div>

        <div class="mt-6 text-xs text-cyan-300" style="opacity: .85;">
          Observação: este é um MVP; a carteira offline é simulada com assinatura local para demonstração de fluxo +Byte$ offline-online.
        </div>
      </div>
    </section>

    <!-- Section: Painel (após login) -->
    <section id="panel-section" class="min-h-screen p-6 hidden">
      <div class="content-wrapper max-w-6xl mx-auto">
        <header class="flex items-center justify-between mb-6 p-4 rounded-xl glow-card bg-black/60 border border-cyan-500 border-opacity-20">
          <div class="flex items-center">
            <div class="hexagon w-9 h-9 bg-gradient-to-br from-cyan-400 to-blue-600 flex items-center justify-center">
              <span class="text-black font-bold" style="font-size: .8rem;">B$</span>
            </div>
            <div class="ml-3 text-xl font-bold gradient-text" style="letter-spacing: .3px;">Byte$.4273</div>
          </div>
          <div class="flex items-center space-x-3">
            <span class="text-sm text-cyan-300" id="header-user">Conectado: </span>
            <button class="btn btn-secondary" onclick="logout()">Sair</button>
          </div>
        </header>

        <div class="layout">
          <!-- Carteira Offline (painel esquerdo) -->
          <aside class="glow-card rounded-xl p-4 bg-black/60 border border-cyan-500 border-opacity-20">
            <div class="flex items-center mb-2">
              <span class="text-sm text-cyan-300" id="walletLabel" style="font-weight:600;">Carteira Avatar</span>
            </div>
            <div class="border-t border-cyan-500 border-opacity-20 pt-2 mt-2"></div>

            <div class="mt-3">
              <div class="text-xs text-cyan-300 mb-1" style="opacity:.9;">Endereço</div>
              <div id="wallet-address" class="font-mono text-sm break-all" style="word-break: break-all;"></div>
            </div>

            <div class="mt-3">
              <div class="text-xs text-cyan-300 mb-1" style="opacity:.9;">Saldo disponível (BT$)</div>
              <div id="wallet-balance" class="text-xl font-semibold" style="letter-spacing: .5px;">BT$ 10,00</div>
            </div>

            <div class="mt-3 text-xs text-cyan-300" style="opacity:.8;">
              Forma offline de transações: assinaturas locais com reconciliação quando online.
            </div>
          </aside>

          <!-- Painel de transações (painel direito) -->
          <main class="glow-card rounded-xl p-4 bg-black/60 border border-cyan-500 border-opacity-20">
            <h2 class="text-xl font-bold gradient-text mb-3" style="display:flex; align-items:center; gap:.5rem;">
              Painel de Transações Byte$
              <span class="text-xs text-cyan-300" style="opacity:.8;">(assinaturas off-line com sincronização)</span>
            </h2>

            <!-- Formulário de nova transação (offline) -->
            <section class="mb-4 p-3 rounded-md bg-black/40 border border-cyan-500 border-opacity-20">
              <div class="text-sm mb-2" style="color:#c6fbff;">Nova Transação (off-line)</div>
              <form id="offlineTxForm" onsubmit="event.preventDefault(); handleNewOfflineTx();">
                <div class="grid" style="grid-template-columns: 1fr 1fr; gap: 0.75rem;">
                  <div>
                    <label class="block text-xs mb-1 text-cyan-300" style="font-weight:600;">Destinatário (Endereço)</label>
                    <input id="recipient" class="input" type="text" placeholder="Endereço do destinatário" required />
                  </div>
                  <div>
                    <label class="block text-xs mb-1 text-cyan-300" style="font-weight:600;">Valor (BT$)</label>
                    <input id="amount" class="input" type="number" step="0.01" min="0" placeholder="0.00" required />
                  </div>
                </div>
                <div class="mt-3">
                  <button class="btn btn-primary" type="submit" style="min-width: 180px;">Enviar Contrato</button>
                </div>
              </form>
            </section>

            <!-- Lista de transações offline assinadas -->
            <section>
              <div class="text-sm mb-2" style="color:#c6fbff;">Transações assinadas (offline) pendentes de sincronização</div>
              <div id="txList" class="space-y-2" style="max-height: 260px; overflow:auto; padding-right:6px;">
                <!-- preenchido dinamicamente -->
              </div>
              <div class="flex items-center justify-between mt-3">
                <div class="text-xs text-cyan-300" style="opacity:.8;">Status: offline-first, hash e assinatura gerados localmente.</div>
                <button class="btn btn-secondary" onclick="syncAllTx()">Sincronizar transações</button>
              </div>
            </section>
          </main>
        </div>
      </div>
    </section>
  </div>

  <script>
    // Database configuration
    const DB_NAME = 'ByteWalletDB';
    const DB_VERSION = 1;
    const DB_STORES = {
      USERS: 'users',
      WALLETS: 'wallets',
      TRANSACTIONS: 'transactions'
    };

    let db;

    // Initialize IndexedDB
    function initDB() {
      return new Promise((resolve, reject) => {
        const request = indexedDB.open(DB_NAME, DB_VERSION);
        
        request.onerror = (e) => {
          console.error('Database error:', e.target.error);
          reject(e.target.error);
        };

        request.onsuccess = (e) => {
          db = e.target.result;
          resolve(db);
        };

        request.onupgradeneeded = (e) => {
          const db = e.target.result;
          
          // Create object stores
          if (!db.objectStoreNames.contains(DB_STORES.USERS)) {
            const usersStore = db.createObjectStore(DB_STORES.USERS, { keyPath: 'username' });
            usersStore.createIndex('username', 'username', { unique: true });
          }

          if (!db.objectStoreNames.contains(DB_STORES.WALLETS)) {
            const walletsStore = db.createObjectStore(DB_STORES.WALLETS, { keyPath: 'username' });
            walletsStore.createIndex('username', 'username', { unique: true });
          }

          if (!db.objectStoreNames.contains(DB_STORES.TRANSACTIONS)) {
            const txStore = db.createObjectStore(DB_STORES.TRANSACTIONS, { keyPath: 'id' });
            txStore.createIndex('username', 'username', { unique: false });
            txStore.createIndex('status', 'status', { unique: false });
          }
        };
      });
    }

    // Utilidades criptográficas (offline-simuladas)
    // Conversões base64/hex
    function bytesToBase64(bytes) {
      let binary = '';
      const len = bytes.byteLength;
      for (let i = 0; i < len; i++) binary += String.fromCharCode(bytes[i]);
      return btoa(binary);
    }
    function base64ToBytes(base64) {
      const binary = atob(base64);
      const len = binary.length;
      const bytes = new Uint8Array(len);
      for (let i = 0; i < len; i++) bytes[i] = binary.charCodeAt(i);
      return bytes;
    }
    function bufferToHex(buffer) {
      const bytes = new Uint8Array(buffer);
      return Array.from(bytes).map(b => b.toString(16).padStart(2, '0')).join('');
    }
    function hexToBytes(hex) {
      if (hex.length % 2 !== 0) throw new Error('Hex inválido');
      const bytes = new Uint8Array(hex.length / 2);
      for (let i = 0; i < hex.length; i += 2) bytes[i / 2] = parseInt(hex.substr(i, 2), 16);
      return bytes;
    }

    // Hash SHA-256 (hex)
    async function sha256Hex(input) {
      const enc = new TextEncoder();
      const data = enc.encode(input);
      const hashBuf = await crypto.subtle.digest('SHA-256', data);
      return bufferToHex(hashBuf);
    }

    // Seed/Wallet (offline)
    // Gerar seed aleatória 32 bytes e endereço (hash do seed)
    function generateSeed() {
      const s = new Uint8Array(32);
      crypto.getRandomValues(s);
      return s;
    }

    function getCurrentUser() {
      return localStorage.getItem('byteUser') || '';
    }

    function setCurrentUser(user) {
      localStorage.setItem('byteUser', user);
    }

    // Deriva chave HMAC a partir do seed armazenado (para assinar)
    async function deriveHmacKeyFromSeed(seedBytes) {
      // Import seed como raw key para HMAC
      const key = await crypto.subtle.importKey(
        'raw',
        seedBytes,
        { name: 'HMAC', hash: { name: 'SHA-256' } },
        false,
        ['sign']
      );
      return key;
    }

    async function signHashWithSeed(hashHex, seedBase64) {
      const seedBytes = base64ToBytes(seedBase64);
      const key = await deriveHmacKeyFromSeed(seedBytes);
      const dataBytes = hexToBytes(hashHex);
      const signature = await crypto.subtle.sign('HMAC', key, dataBytes);
      return bufferToHex(signature);
    }

    // Helpers para salvar/ler dados de usuário
    function walletKey(user) { return `wallet:${user}`; }
    function walletSeed(user) { return `walletSeed:${user}`; }
    function walletAddress(user) { return `walletAddress:${user}`; }
    function walletBalance(user) { return `walletBalance:${user}`; }
    function txListKey(user) { return `txList:${user}`; }

    // Inicia ou recupera a wallet offline para o usuário
    async function initializeWalletForUser(user) {
      // Se já houver seed, apenas retorna
      const existingSeed = localStorage.getItem(walletSeed(user));
      if (existingSeed) return true;

      // Senão, cria seed aleatória e endereço
      const seed = generateSeed();
      const seedBase64 = bytesToBase64(seed);
      const addrHex = (await sha256Hex(bytesToHexBytes(seed))).substring(0, 40);

      // Salva
      localStorage.setItem(walletSeed(user), seedBase64);
      localStorage.setItem(walletAddress(user), addrHex);
      localStorage.setItem(walletBalance(user), '10.00'); // Starting balance of 10 BT$ (equivalent to 1000 BRL)
      localStorage.setItem(txListKey(user), JSON.stringify([]));
      return true;
    }

    // Função auxiliar para transformar Uint8Array em hex (para hash de seed, etc)
    function bytesToHexBytes(bytes) {
      // Aceita Uint8Array, retorna hex string de hex? Aqui queremos string para sha256Hex
      // Convertendo diretamente
      return Array.from(bytes, b => ('0' + b.toString(16)).slice(-2)).join('');
    }

    // Exibe informações na UI do painel
    async function renderPanel() {
      const user = getCurrentUser();
      if (!user) {
        // voltar para login
        document.getElementById('panel-section').classList.add('hidden');
        document.getElementById('login-section').classList.remove('hidden');
        return;
      }

      // Header
      document.getElementById('header-user').textContent = `Conectado: ${user}`;

      // Endereço e saldo
      const address = localStorage.getItem(walletAddress(user)) || '';
      const balance = localStorage.getItem(walletBalance(user)) || '0.00';
      document.getElementById('wallet-address').textContent = address;
      document.getElementById('wallet-balance').textContent = `BT$ ${Number(balance).toFixed(2)}`;

      // Transações
      renderTxList();

      // Mostrar painel
      document.getElementById('login-section').classList.add('hidden');
      document.getElementById('panel-section').classList.remove('hidden');
    }

    // Renderização da lista de transações
    async function renderTxList() {
      const user = await getCurrentUser();
      const txList = await new Promise((resolve) => {
        const tx = db.transaction(DB_STORES.TRANSACTIONS, 'readonly');
        const store = tx.objectStore(DB_STORES.TRANSACTIONS);
        const index = store.index('username');
        const request = index.getAll(user);
        
        request.onsuccess = (e) => {
          resolve(e.target.result || []);
        };
      });
      const container = document.getElementById('txList');
      container.innerHTML = '';

      if (txList.length === 0) {
        container.innerHTML = '<div class="text-xs text-cyan-300" style="opacity:.8;">Sem transações assinadas ainda. Use o formulário “Nova Transação” para criar uma assinatura offline.</div>';
        return;
      }

      txList.forEach((tx, idx) => {
        const item = document.createElement('div');
        item.className = 'p-3 rounded-md bg-black/40 border border-cyan-500 border-opacity-20';
        item.style.display = 'grid';
        item.style.gridTemplateColumns = '1fr auto';
        item.style.alignItems = 'center';
        item.style.gap = '0.5rem';
        item.innerHTML = `
          <div>
            <div class="text-sm font-semibold" style="color:#eaffff;">${tx.id}</div>
            <div class="text-xs" style="color:#c6fbff; opacity:.8;">
              para ${tx.to} • ${Number(tx.amount).toFixed(2)} BT$ • ${new Date(tx.timestamp).toLocaleString()}
            </div>
          </div>
          <div class="text-xs" style="color:#c6fbf; text-align: right;">
            status: ${tx.status} <br/>
            hash: ${tx.hash ? tx.hash.substring(0, 8) + '...' : ''}
          </div>
        `;
        container.appendChild(item);
      });
    }

    // Login: valida inputs e inicia wallet
    async function handleLogin() {
      const username = document.getElementById('username').value.trim();
      const password = document.getElementById('password').value; // neste MVP, apenas valida presença
      const errorEl = document.getElementById('login-error');
      errorEl.classList.add('hidden');
      errorEl.textContent = '';

      if (!username || !password) {
        errorEl.textContent = 'Por favor, informe usuário e senha para prosseguir.';
        errorEl.classList.remove('hidden');
        return;
      }

      // Autenticação simplificada: permite login se houver qualquer senha
      // Inicializa wallet se não existir
      await initializeWalletForUser(username);
      // Marca usuário atual
      setCurrentUser(username);

      // Atualiza UI de painel
      renderPanel();
    }

    // Geração de demonstração rápida (demo)
    function quickFillDemo() {
      document.getElementById('username').value = 'demo@byte$.local';
      document.getElementById('password').value = 'demopadrao';
    }

    // No painel: criar nova transação offline (assinatura)
    async function handleNewOfflineTx() {
      const user = getCurrentUser();
      if (!user) return;

      const recipient = document.getElementById('recipient').value.trim();
      const amount = parseFloat(document.getElementById('amount').value);

      if (!recipient || isNaN(amount) || amount <= 0) {
        alert('Informe destinatário válido e valor positivo.');
        return;
      }

      // Gera tx
      const txId = 'tx-' + Date.now() + '-' + Math.random().toString(16).slice(2, 7);
      const timestamp = Date.now();
      const payload = { id: txId, to: recipient, amount: amount, timestamp: timestamp };

      // Calcula hash do payload
      const payloadStr = JSON.stringify(payload);
      const hashHex = await sha256Hex(payloadStr);

      // Assina hash com seed offline
      const seedBase64 = localStorage.getItem(walletSeed(user));
      const signature = await signHashWithSeed(hashHex, seedBase64);

      const tx = {
        id: txId,
        to: recipient,
        amount: amount,
        timestamp: timestamp,
        status: 'signed',
        hash: hashHex,
        signature: signature
      };

      // Persiste transação
      await new Promise((resolve) => {
        const tx = db.transaction(DB_STORES.TRANSACTIONS, 'readwrite');
        const store = tx.objectStore(DB_STORES.TRANSACTIONS);
        store.put({
          ...tx,
          username: user
        });
        resolve();
      });

      // Atualiza saldo na carteira
      await new Promise((resolve) => {
        const tx = db.transaction(DB_STORES.WALLETS, 'readwrite');
        const store = tx.objectStore(DB_STORES.WALLETS);
        const request = store.get(user);
        
        request.onsuccess = (e) => {
          const wallet = e.target.result;
          if (wallet) {
            const currentBal = parseFloat(wallet.balance || '0');
            wallet.balance = Math.max(0, currentBal - amount).toFixed(2);
            store.put(wallet);
          }
          resolve();
        };
      });

      // Limpa inputs e atualiza UI
      document.getElementById('recipient').value = '';
      document.getElementById('amount').value = '';
      renderPanel();
      alert('Transação assinada offline com sucesso.\nHash: ' + hashHex.substring(0, 12) + '...');
    }

    // Sincronizar todas as tx assinadas (simulado)
    async function syncAllTx() {
      const user = getCurrentUser();
      if (!user) return;

      const listKey = txListKey(user);
      const txList = JSON.parse(localStorage.getItem(listKey) || '[]');
      if (txList.length === 0) {
        alert('Nenhuma transação para sincronizar.');
        return;
      }

      // Simulação: marca como sincronizadas
      txList.forEach(tx => {
        if (tx.status === 'signed' || tx.status === 'pending') tx.status = 'synced';
      });

      localStorage.setItem(listKey, JSON.stringify(txList));
      renderTxList();

      alert('Sincronização simulada concluída. Transações marcadas como synced.');
    }

    // Logout
    function logout() {
      // Limpeza simples de sessão
      localStorage.removeItem('byteUser');
      // Não limpar wallet para permitir re-login rápido, mas você pode limpar se desejar
      document.getElementById('panel-section').classList.add('hidden');
      document.getElementById('login-section').classList.remove('hidden');
    }

    // Inicia (ao carregar)
    window.addEventListener('DOMContentLoaded', async () => {
      await initDB();
      
      // Se já há usuário salvo na sessão, pode pular para o painel
      const user = await getCurrentUser();
      if (user) {
        await setCurrentUser(user);
        await initializeWalletForUser(user);
        await renderPanel();
      }
    });

    // Helpers: converte uma string para hex de bytes (util para seed hash)
    function bytesFromString(str) {
      const enc = new TextEncoder();
      return enc.encode(str);
    }

    // Conversão util para hex do seed (se precisar)
    async function seedToAddress(seedBytes) {
      const h = await sha256Hex(bytesToHexBytes(seedBytes));
      return h.substring(0, 40);
    }

    // Função para converter Uint8Array para hex (usada em seedToAddress)
    function bytesToHexString(bytes) {
      return Array.from(bytes).map(b => b.toString(16).padStart(2, '0')).join('');
    }

    // Função de inicialização do app para manter UI coerente
    // Apenas para demonstrar que o app está pronto
    // (nenhuma ação aqui, apenas placeholder)

  </script>

  <!-- Observações rápidas sobre o código:
       - O login é baseado em usuário/senha para UX. A carteira offline é simulada:
         - Seed aleatória gerada na primeira autenticação do usuário.
         - Endereço derivado do seed (sha256 do seed).
         - Assinatura de transações offline via HMAC-SHA-256 com a seed.
         - Transações ficam em localStorage e podem ser sincronizadas (estado 'synced').
       - O painel mostra o saldo, endereço e uma lista de transações assinadas. -->
</body>
</html>