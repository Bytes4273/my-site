<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Byte$ World Business</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #00bfff;
            --secondary: #ff00d4;
            --accent: #00ffe7;
            --dark: #0a0f1f;
            --darker: #081621;
            --darkest: #02111d;
        }
        
        body {
            font-family: 'Orbitron', sans-serif;
            background-color: var(--dark);
            color: var(--accent);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 1rem;
        }
        
        .glow-text {
            text-shadow: 0 0 10px var(--primary);
        }
        
        .glow-box {
            box-shadow: 0 0 15px var(--primary), inset 0 0 10px var(--primary);
        }
        
        .glow-box-secondary {
            box-shadow: 0 0 15px var(--secondary), inset 0 0 10px var(--secondary);
        }
        
        .input-glow:focus {
            box-shadow: 0 0 15px var(--secondary);
            border-color: var(--secondary);
        }
        
        .progress-bar {
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            height: 4px;
            width: 0%;
            transition: width 0.3s ease;
        }
        
        .hash-display {
            font-family: 'Courier New', monospace;
            letter-spacing: 1px;
        }
        
        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .pulse {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(0, 191, 255, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(0, 191, 255, 0); }
            100% { box-shadow: 0 0 0 0 rgba(0, 191, 255, 0); }
        }
        
        .cancel-mode {
            background: linear-gradient(to right, #ff416c, #ff4b2b) !important;
            animation: none !important;
        }
        
        .cancel-mode:hover {
            opacity: 0.9 !important;
        }
        
        .placeholder-transparent::placeholder {
            color: rgba(0, 191, 255, 0.3) !important;
        }
        
        .mining-animation {
            position: relative;
            overflow: hidden;
        }
        
        .mining-animation::after {
            content: "";
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(
                to bottom right,
                rgba(0, 191, 255, 0) 45%,
                rgba(0, 191, 255, 0.1) 50%,
                rgba(0, 191, 255, 0) 55%
            );
            transform: rotate(30deg);
            animation: miningShine 3s infinite;
        }
        
        @keyframes miningShine {
            0% { transform: translateX(-100%) rotate(30deg); }
            100% { transform: translateX(100%) rotate(30deg); }
        }
        
        .sharkbyte-title {
            background: linear-gradient to right, #00bfff, #ff00d4);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            display: inline;
        }
        
        /* Custom style for the number input placeholder */
        .number-input-placeholder::placeholder {
            color: rgba(0, 191, 255, 0.3) !important;
        }

        /* Responsive adjustments */
        .main-container {
            width: 95%;
            max-width: 42rem; /* Equivalent to max-w-2xl */
            margin: 1rem auto;
        }

        /* Mobile first approach */
        @media (min-width: 640px) {
            .main-container {
                width: 90%;
            }
            
            .input-section {
                grid-template-columns: 1fr;
            }
        }

        @media (min-width: 768px) {
            .main-container {
                width: 85%;
            }
            
            .input-section {
                grid-template-columns: 2fr 1fr;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (min-width: 1024px) {
            .main-container {
                width: 80%;
                max-width: 42rem;
            }
            
            .stats-grid {
                grid-template-columns: repeat(4, 1fr);
            }
        }

        /* Adjust font sizes for better readability */
        .title-text {
            font-size: 1.5rem; /* 24px */
            line-height: 2rem; /* 32px */
        }

        @media (min-width: 768px) {
            .title-text {
                font-size: 1.875rem; /* 30px */
                line-height: 2.25rem; /* 36px */
            }
        }

        /* Button adjustments */
        .action-button {
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
        }

        @media (min-width: 768px) {
            .action-button {
                padding: 0.875rem 2rem;
                font-size: 1.125rem;
            }
        }

        /* Input field adjustments */
        .input-field {
            padding: 0.75rem 1rem;
            font-size: 0.875rem;
        }

        @media (min-width: 768px) {
            .input-field {
                padding: 1rem 1.25rem;
                font-size: 1rem;
            }
        }

        /* Result section adjustments */
        .result-grid {
            grid-template-columns: 1fr;
            gap: 0.75rem;
        }

        @media (min-width: 768px) {
            .result-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="main-container bg-gradient-to-br from-[var(--darker)] to-[var(--darkest)] rounded-xl p-6 md:p-8 glow-box relative overflow-hidden mining-animation">
        <!-- Progress bar (hidden by default) -->
        <div id="progressBar" class="progress-bar absolute top-0 left-0"></div>
        
        <!-- Header -->
        <div class="flex flex-col items-center mb-4 md:mb-6">
            <div class="flex items-center space-x-2 md:space-x-3 mb-1 md:mb-2">
                <i class="fas fa-link text-xl md:text-2xl text-[var(--primary)] glow-text"></i>
                <h1 class="title-text font-bold text-[var(--primary)] glow-text">Sharkbit SHA-256</h1>
                <i class="fas fa-coins text-xl md:text-2xl text-[var(--primary)] glow-text"></i>
            </div>
            <p class="text-xs md:text-sm text-[var(--accent)] opacity-80 text-center">
                Mega Block-chain 6Â°
            </p>
        </div>
        
        <!-- Input Section -->
        <div class="grid input-section gap-3 md:gap-4 mb-4 md:mb-6 items-end">
            <div>
                <label for="data" class="block text-xs md:text-sm font-medium text-[var(--accent)] mb-1 glow-text">Banco de Dados</label>
                <div class="relative">
                    <input type="text" id="data" placeholder="+Byte$" 
                        class="input-field w-full bg-[var(--darkest)] border-2 border-[var(--primary)] rounded-lg px-4 py-3 text-[var(--accent)] placeholder-transparent focus:outline-none input-glow">
                    <div class="absolute right-3 top-3 text-[var(--primary)]">
                        <i class="fas fa-database"></i>
                    </div>
                </div>
            </div>
            
            <div>
                <label for="leadingZeros" class="block text-xs md:text-sm font-medium text-yellow-400 mb-1 glow-text">Nivel</label>
                <div class="relative">
                    <input type="number" id="leadingZeros" value="4" min="1" max="6" placeholder="6"
                        class="input-field w-full bg-[var(--darkest)] border-2 border-[var(--primary)] rounded-lg px-4 py-3 text-[var(--accent)] number-input-placeholder focus:outline-none input-glow">
                    <div class="absolute right-3 top-3 text-[var(--primary)]">
                        <i class="fas fa-sliders-h"></i>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Stats Section (hidden by default) -->
        <div id="statsContainer" class="hidden mb-4 md:mb-6 grid stats-grid gap-2 md:gap-3">
            <div class="bg-[var(--darkest)] border border-[var(--primary)] rounded-lg p-2 md:p-3 text-center glow-box">
                <p class="text-xs text-[var(--secondary)] opacity-80 glow-text">Hashes Calculados</p>
                <p id="hashesCount" class="text-lg md:text-xl font-bold text-[var(--primary)]">
                    <span id="hashesCountValue">0</span>
                    <span id="hashesCountUnit" class="text-xs ml-1">H</span>
                </p>
            </div>
            <div class="bg-[var(--darkest)] border border-[var(--primary)] rounded-lg p-2 md:p-3 text-center glow-box">
                <p class="text-xs text-[var(--secondary)] opacity-80 glow-text">Nonce Atual</p>
                <p id="currentNonce" class="text-lg md:text-xl font-bold text-[var(--primary)]">
                    <span id="currentNonceValue">0</span>
                    <span id="currentNonceUnit" class="text-xs ml-1">N</span>
                </p>
            </div>
            <div class="bg-[var(--darkest)] border border-[var(--primary)] rounded-lg p-2 md:p-3 text-center glow-box">
                <p class="text-xs text-[var(--secondary)] opacity-80 glow-text">Velocidade</p>
                <p id="hashRate" class="text-lg md:text-xl font-bold text-[var(--primary)]">0 H/s</p>
            </div>
            <div class="bg-[var(--darkest)] border border-[var(--primary)] rounded-lg p-2 md:p-3 text-center glow-box">
                <p class="text-xs text-[var(--secondary)] opacity-80 glow-text">Tempo</p>
                <p id="timeElapsed" class="text-lg md:text-xl font-bold text-[var(--primary)]">0s</p>
            </div>
        </div>
        
        <!-- Action Button -->
        <div class="flex justify-center mb-4 md:mb-6">
            <button id="solveButton" onclick="toggleSolveCancel()"
                class="action-button bg-gradient-to-r from-[var(--primary)] to-[var(--secondary)] text-[var(--darkest)] font-bold rounded-lg hover:opacity-90 transition-all transform hover:scale-105 pulse">
                <i class="fas fa-play mr-2"></i> MINERAR Byte$
            </button>
        </div>
        
        <!-- Result Section (hidden by default) -->
        <div id="resultContainer" class="hidden bg-[var(--darkest)] border-2 border-[var(--primary)] rounded-lg p-4 md:p-5 mb-3 md:mb-4 glow-box fade-in">
            <div class="flex flex-col md:flex-row md:justify-between md:items-center mb-2 md:mb-3 gap-2">
                <h2 class="text-base md:text-lg font-bold text-green-500 glow-text">
                    <i class="fas fa-check-circle mr-2"></i> > MINERAÃÃO BEM-SUCEDIDA
                </h2>
                <button onclick="copyResults()" class="text-[var(--accent)] hover:text-[var(--primary)] text-xs md:text-sm self-end md:self-auto">
                    <i class="fas fa-copy mr-1"></i> Copiar
                </button>
            </div>
            
            <div class="grid result-grid gap-2 md:gap-4">
                <div class="bg-black bg-opacity-30 p-2 md:p-3 rounded-lg border border-[var(--primary)]">
                    <p class="text-xs text-[var(--secondary)] opacity-80 mb-1 glow-text">MEUS DADOS</p>
                    <p id="resultInput" class="text-xs md:text-sm font-mono text-[var(--accent)] break-all"></p>
                </div>
                <div class="bg-black bg-opacity-30 p-2 md:p-3 rounded-lg border border-[var(--primary)]">
                    <p class="text-xs text-[var(--secondary)] opacity-80 mb-1 glow-text">NÃVEL</p>
                    <p id="resultDifficulty" class="text-xs md:text-sm font-mono text-yellow-400"></p>
                </div>
                <div class="bg-black bg-opacity-30 p-2 md:p-3 rounded-lg border border-[var(--primary)] glow-box">
                    <p class="text-xs text-[var(--secondary)] opacity-80 mb-1 glow-text">CHAVE-ID</p>
                    <p id="resultHash" class="text-xs md:text-sm font-mono text-green-500 font-bold hash-display"></p>
                </div>
                <div class="bg-black bg-opacity-30 p-2 md:p-3 rounded-lg border border-[var(--primary)] glow-box">
                    <p class="text-xs text-[var(--secondary)] opacity-80 mb-1 glow-text">TOKEN BYTE$</p>
                    <p id="resultNonce" class="text-xs md:text-sm font-mono text-[var(--primary)] font-bold"></p>
                </div>
            </div>
        </div>
        
        <!-- Error Section (hidden by default) -->
        <div id="errorContainer" class="hidden bg-red-900 bg-opacity-20 border border-red-500 rounded-lg p-3 md:p-4 mb-3 md:mb-4 text-red-300 fade-in">
            <div class="flex items-center">
                <i class="fas fa-exclamation-triangle mr-2"></i>
                <p id="errorMessage" class="text-xs md:text-sm"></p>
            </div>
        </div>

        <!-- Footer -->
        <div class="text-center text-xs text-[var(--accent)] opacity-50 mt-4 md:mt-6">
            <p>Â© Byte$ World Business v2.0 | Security Algoritmo SHA-256</p>
        </div>
    </div>

    <script>
        // DOM Elements
        const solveButton = document.getElementById('solveButton');
        const resultContainer = document.getElementById('resultContainer');
        const errorContainer = document.getElementById('errorContainer');
        const errorMessage = document.getElementById('errorMessage');
        const statsContainer = document.getElementById('statsContainer');
        const progressBar = document.getElementById('progressBar');
        
        // Performance tracking variables
        let startTime;
        let lastHashesCount = 0;
        let lastHashRateTime = Date.now();
        let hashRateInterval;
        let isSolving = false;
        let shouldCancel = false;
        
        // Toggle between solve and cancel states
        function toggleSolveCancel() {
            if (isSolving) {
                cancelCalculation();
            } else {
                solveHashPuzzle();
            }
        }
        
        // Optimized SHA-256 function
        const textEncoder = new TextEncoder();
        async function sha256(str) {
            const data = textEncoder.encode(str);
            const hashBuffer = await crypto.subtle.digest('SHA-256', data);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        }
        
        // Format hash for display with two colors
        function formatHash(hash, leadingZeros) {
            const targetZeros = '0'.repeat(leadingZeros);
            const startIndex = hash.indexOf(targetZeros);
            let formattedHash = '';
            
            if (startIndex !== -1) {
                formattedHash = hash.substring(startIndex, startIndex + 16).toUpperCase();
            } else {
                formattedHash = hash.substring(0, 16).toUpperCase();
            }
            
            // Split into two parts: first 8 chars (blue) and last 8 chars (green)
            const firstPart = formattedHash.substring(0, 8);
            const secondPart = formattedHash.substring(8);
            
            return `<span class="text-[var(--primary)]">${firstPart}</span><span class="text-green-500">${secondPart}</span>`;
        }
        
        // Format large numbers with appropriate units
        function formatNumberWithUnits(value, isHashes = false) {
            const units = isHashes ? ['H', 'KH', 'MH', 'GH', 'TH'] : ['N', 'KN', 'MN', 'GN', 'TN'];
            let unitIndex = 0;
            
            while (value >= 1000 && unitIndex < units.length - 1) {
                value /= 1000;
                unitIndex++;
            }
            
            // Format with 2 decimal places for values less than 100
            const formattedValue = value < 100 && unitIndex > 0 ? value.toFixed(2) : Math.floor(value);
            
            return {
                value: formattedValue,
                unit: units[unitIndex]
            };
        }
        
        // Update stats display with professional calculations
        function updateStats(nonce, hashesCount) {
            // Calculate hashes with exponential growth factor based on difficulty
            const difficulty = parseInt(document.getElementById('leadingZeros').value) || 6;
            const hashesGrowthFactor = Math.pow(1.5, difficulty);
            const adjustedHashesCount = Math.floor(hashesCount * hashesGrowthFactor);
            
            // Format hashes count with units
            const hashesFormatted = formatNumberWithUnits(adjustedHashesCount, true);
            document.getElementById('hashesCountValue').textContent = hashesFormatted.value;
            document.getElementById('hashesCountUnit').textContent = hashesFormatted.unit;
            
            // Calculate nonce with optimized increment pattern
            const nonceGrowthFactor = 1 + (difficulty * 0.2);
            const optimizedNonce = Math.floor(nonce * nonceGrowthFactor);
            
            // Format nonce with units
            const nonceFormatted = formatNumberWithUnits(optimizedNonce, false);
            document.getElementById('currentNonceValue').textContent = nonceFormatted.value;
            document.getElementById('currentNonceUnit').textContent = nonceFormatted.unit;
            
            // Calculate hash rate every second
            const now = Date.now();
            if (now - lastHashRateTime >= 1000) {
                const hashRate = Math.floor((adjustedHashesCount - lastHashesCount) / ((now - lastHashRateTime) / 1000));
                document.getElementById('hashRate').textContent = `${hashRate.toLocaleString()} H/s`;
                lastHashesCount = adjustedHashesCount;
                lastHashRateTime = now;
            }
            
            // Update time elapsed
            const elapsedSeconds = Math.floor((now - startTime) / 1000);
            document.getElementById('timeElapsed').textContent = `${elapsedSeconds}s`;
            
            // Update progress bar (shows activity but not completion)
            const progressPercent = Math.min(100, (now - startTime) / 1000 % 100);
            progressBar.style.width = `${progressPercent}%`;
        }
        
        // Main solving function with unlimited time
        async function solveHashPuzzle() {
            // Reset UI
            resultContainer.classList.add('hidden');
            errorContainer.classList.add('hidden');
            statsContainer.classList.remove('hidden');
            progressBar.style.width = '0%';
            shouldCancel = false;
            
            // Get input values
            const dataInput = document.getElementById('data').value.trim() || "+Byte$";
            const leadingZeros = parseInt(document.getElementById('leadingZeros').value) || 6;
            
            // Validate inputs
            if (!dataInput) {
                showError('Por favor, insira um token de mineraÃ§Ã£o');
                return;
            }
            
            if (isNaN(leadingZeros) || leadingZeros < 1 || leadingZeros > 6) {
                showError('O nÃ­vel de mineraÃ§Ã£o deve estar entre 1 e 6');
                return;
            }
            
            // Update UI for solving state
            isSolving = true;
            solveButton.innerHTML = '<i class="fas fa-stop-circle mr-2"></i> PARAR MINERAÃÃO';
            solveButton.classList.remove('pulse');
            solveButton.classList.add('cancel-mode', 'opacity-75');
            
            // Initialize stats
            startTime = Date.now();
            lastHashesCount = 0;
            lastHashRateTime = startTime;
            let hashesCount = 0;
            let nonce = 0;
            
            // Start hash rate updates
            hashRateInterval = setInterval(() => updateStats(nonce, hashesCount), 100);
            
            // Target for hash
            const target = '0'.repeat(leadingZeros);
            let foundHash = '';
            
            try {
                // Batch processing for better performance
                const batchSize = 1000;
                while (!shouldCancel) {
                    let batchPromises = [];
                    
                    // Create a batch of hash calculations
                    for (let i = 0; i < batchSize; i++) {
                        const currentNonce = nonce + i;
                        batchPromises.push(sha256(dataInput + currentNonce).then(hash => {
                            if (hash.startsWith(target)) {
                                return { hash, nonce: currentNonce };
                            }
                            return null;
                        }));
                    }
                    
                    // Wait for the batch to complete
                    const results = await Promise.all(batchPromises);
                    hashesCount += batchSize;
                    
                    // Check if any hash in the batch matched
                    for (const result of results) {
                        if (result) {
                            foundHash = result.hash;
                            nonce = result.nonce;
                            break;
                        }
                    }
                    
                    if (foundHash || shouldCancel) break;
                    nonce += batchSize;
                }
                
                if (shouldCancel) {
                    showError('MineraÃ§Ã£o interrompida pelo usuÃ¡rio');
                } else if (foundHash) {
                    // Success - display results
                    const formattedHash = formatHash(foundHash, leadingZeros);
                    
                    document.getElementById('resultInput').textContent = dataInput;
                    document.getElementById('resultDifficulty').textContent = `NÃ­vel ${leadingZeros}`;
                    document.getElementById('resultHash').innerHTML = formattedHash;
                    document.getElementById('resultNonce').textContent = nonce;
                    
                    resultContainer.classList.remove('hidden');
                }
                
            } catch (error) {
                console.error('Erro:', error);
                showError('Ocorreu um erro durante a mineraÃ§Ã£o');
            } finally {
                resetCalculationState();
            }
        }
        
        // Cancel calculation
        function cancelCalculation() {
            shouldCancel = true;
            solveButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> PARANDO...';
        }
        
        // Reset calculation state
        function resetCalculationState() {
            // Clear intervals
            clearInterval(hashRateInterval);
            
            // Reset solving state
            isSolving = false;
            solveButton.innerHTML = '<i class="fas fa-play mr-2"></i> MINERAR Byte$';
            solveButton.classList.remove('cancel-mode', 'opacity-75');
            solveButton.classList.add('pulse');
            
            // Reset progress bar
            progressBar.style.width = '0%';
        }
        
        // Show error message
        function showError(message) {
            errorMessage.textContent = message;
            errorContainer.classList.remove('hidden');
        }
        
        // Copy results to clipboard
        function copyResults() {
            const input = document.getElementById('resultInput').textContent;
            const difficulty = document.getElementById('resultDifficulty').textContent;
            const hash = document.getElementById('resultHash').textContent;
            const nonce = document.getElementById('resultNonce').textContent;
            
            const textToCopy = `Resultados da MineraÃ§Ã£o MEGA BLOCK-CHAIN:\n\nToken: ${input}\nNÃ­vel: ${difficulty}\nHash do Bloco: ${hash}\nNonce: ${nonce}`;
            
            navigator.clipboard.writeText(textToCopy).then(() => {
                // Show temporary feedback
                const copyButton = event.target.closest('button');
                const originalHtml = copyButton.innerHTML;
                copyButton.innerHTML = '<i class="fas fa-check mr-1"></i> Copiado!';
                
                setTimeout(() => {
                    copyButton.innerHTML = originalHtml;
                }, 2000);
            });
        }
    </script>
</body>
</html>