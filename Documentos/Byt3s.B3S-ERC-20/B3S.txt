// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

// ===== Imports diretos do GitHub OpenZeppelin v4.9.6 =====
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.6/contracts/token/ERC20/ERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.6/contracts/token/ERC20/extensions/ERC20Snapshot.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.6/contracts/security/Pausable.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.6/contracts/access/AccessControl.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.6/contracts/security/ReentrancyGuard.sol";

// ===== Interface para Oracle de preço =====
interface IByt3sOracle {
    function b3sToBRL(uint256 amountB3S) external view returns (uint256 brlAmount);
    function brlToB3S(uint256 amountBRL) external view returns (uint256 b3sAmount);
}

contract Byt3sToken is
    ERC20,
    ERC20Snapshot,
    Pausable,
    AccessControl,
    ReentrancyGuard
{
    bytes32 public constant GOVERNANCE_ROLE    = keccak256("GOVERNANCE_ROLE");
    bytes32 public constant COMPLIANCE_ROLE    = keccak256("COMPLIANCE_ROLE");
    bytes32 public constant RELAYER_ROLE       = keccak256("RELAYER_ROLE");
    bytes32 public constant ORACLE_MANAGER_ROLE= keccak256("ORACLE_MANAGER_ROLE");
    bytes32 public constant SNAPSHOT_ROLE      = keccak256("SNAPSHOT_ROLE");
    bytes32 public constant PAUSER_ROLE        = keccak256("PAUSER_ROLE");

    address public governanceMultisig;
    address public blueFund;
    IByt3sOracle public priceOracle;

    mapping(address => bool) public blacklisted;
    mapping(address => bool) public frozen;

    uint256 public constant ANNUAL_MINT_BPS = 500; // 5% ao ano
    uint64  public lastMintTimestamp;
    uint64  public constant MINT_INTERVAL = 365 days;

    event BlacklistUpdated(address indexed account, bool status);
    event FreezeUpdated(address indexed account, bool status);
    event AnnualMint(uint256 amount, uint64 timestamp);

    constructor(
        address _governanceMultisig,
        address _blueFund,
        address _oracle
    ) ERC20("Byt3s", "B3S") {
        require(_governanceMultisig != address(0), "Invalid governance address");
        require(_blueFund != address(0), "Invalid BlueFund address");
        require(_oracle != address(0), "Invalid Oracle address");

        governanceMultisig = _governanceMultisig;
        blueFund = _blueFund;
        priceOracle = IByt3sOracle(_oracle);

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setupRole(GOVERNANCE_ROLE, _governanceMultisig);
        _setupRole(COMPLIANCE_ROLE, _governanceMultisig);
        _setupRole(PAUSER_ROLE, _governanceMultisig);
        _setupRole(SNAPSHOT_ROLE, _governanceMultisig);
        _setupRole(RELAYER_ROLE, _governanceMultisig);
        _setupRole(ORACLE_MANAGER_ROLE, _governanceMultisig);

        uint256 initialSupply = 100_000_000 * 1e18; // 100 milhões de B3S
        _mint(_governanceMultisig, initialSupply);

        lastMintTimestamp = uint64(block.timestamp);
    }

    function decimals() public pure override returns (uint8) {
        return 18;
    }

    // Snapshot de balanços (para dividendos, sorteios, etc.)
    function snapshot() external onlyRole(SNAPSHOT_ROLE) {
        _snapshot();
    }

    // Pausar e despausar transações
    function pause() external onlyRole(PAUSER_ROLE) {
        _pause();
    }

    function unpause() external onlyRole(PAUSER_ROLE) {
        _unpause();
    }

    // Blacklist e Freeze
    function setBlacklist(address account, bool status) external onlyRole(COMPLIANCE_ROLE) {
        blacklisted[account] = status;
        emit BlacklistUpdated(account, status);
    }

    function setFreeze(address account, bool status) external onlyRole(COMPLIANCE_ROLE) {
        frozen[account] = status;
        emit FreezeUpdated(account, status);
    }

    // Mint anual fixo de 5%
    function mintAnnual() external onlyRole(GOVERNANCE_ROLE) whenNotPaused {
        require(uint64(block.timestamp) >= lastMintTimestamp + MINT_INTERVAL, "Mint too early");
        uint256 amount = (totalSupply() * ANNUAL_MINT_BPS) / 10_000;
        lastMintTimestamp += MINT_INTERVAL;
        _mint(governanceMultisig, amount);
        emit AnnualMint(amount, lastMintTimestamp);
    }

    // Regras internas de transferência
    function _beforeTokenTransfer(address from, address to, uint256 amount)
        internal
        override(ERC20, ERC20Snapshot)
    {
        if (from != address(0)) {
            require(!blacklisted[from], "Sender blacklisted");
            require(!frozen[from], "Sender frozen");
        }
        if (to != address(0)) {
            require(!blacklisted[to], "Recipient blacklisted");
        }
        require(!paused(), "Token is paused");
        super._beforeTokenTransfer(from, to, amount);
    }
}
