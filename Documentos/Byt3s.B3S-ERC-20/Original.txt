// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

contract Byte$ {
    // Armazenamento de saldos e aprovações
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    // Dados do token
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    // Eventos padrão ERC-20
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // Construtor
    constructor() {
        _name = "Byte$";
        _symbol = "BT$";
        _decimals = 8;
        _totalSupply = 21500000000 * 10 ** _decimals; // Total Supply definido
        _balances[msg.sender] = _totalSupply; // Alocar todo o supply para o criador do contrato

        emit Transfer(address(0), msg.sender, _totalSupply); // Emissão inicial
    }

    // Nome do token
    function name() public view returns (string memory) {
        return _name;
    }

    // Símbolo do token
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    // Casas decimais
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    // Total supply do token
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    // Saldo de um endereço
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    // Transferência de tokens
    function transfer(address to, uint256 amount) public returns (bool) {
        require(to != address(0), "Byte$: Transfer to the zero address");
        require(_balances[msg.sender] >= amount, "Byte$: Insufficient balance");

        _balances[msg.sender] -= amount;
        _balances[to] += amount;

        emit Transfer(msg.sender, to, amount);
        return true;
    }

    // Transferência em nome de outro endereço
    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        require(from != address(0), "Byte$: Transfer from the zero address");
        require(to != address(0), "Byte$: Transfer to the zero address");
        require(_balances[from] >= amount, "Byte$: Insufficient balance");
        require(_allowances[from][msg.sender] >= amount, "Byte$: Transfer amount exceeds allowance");

        _balances[from] -= amount;
        _balances[to] += amount;
        _allowances[from][msg.sender] -= amount;

        emit Transfer(from, to, amount);
        return true;
    }

    // Aprovar um endereço para gastar em nome do dono
    function approve(address spender, uint256 amount) public returns (bool) {
        require(spender != address(0), "Byte$: Approve to the zero address");

        _allowances[msg.sender][spender] = amount;

        emit Approval(msg.sender, spender, amount);
        return true;
    }

    // Retornar a quantidade aprovada para gasto
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }
}